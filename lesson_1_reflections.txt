How did viewing a diff between two versions of a file help you see the bug that 
was introduced?


It allwed me to focus my attention on the lines with changes in them. Then I only needed to find the changes in the lines.


How could having easy access to the entire history of a file make you a more
 efficient programmer in the long term?

I can refer to previous versions of a file to recall what was done before and restore the contents.

What do you think are the pros and cons of manually choosing when to create a
 commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Manual commits makes sure a set of changes is complete. Automatic commits wind up with partial changes that don't work.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git saves multiple files in a commit because it is designed for use on multi-file projects. Documents are single file projects.

How can you use the commands git log and git diff to view the history of files?

git log --stat will show the history of changes in a repository.
git diff {commit id} {commit id} will show the changes that were made between two commits.

How might using version control make you more confident to make changes that
could break something?

It will allow me to quickly return to a previous version of the project that was known to be working. I still don't know how to remove the commit that has the error in it. Do I just have to make another commit with the problem fixed in it? How to I mark the error commit as an error so it is not used in the future?

Now that you have your workspace set up, what do you want to try using Git for?

Try using git for my next programming language course projecs.


